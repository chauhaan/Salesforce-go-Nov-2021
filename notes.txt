
Schedule:
    Commence    : T                         
    Tea Break   : T + 1:30 Hrs (20 mins)    
    Lunch Break : T : 3:30 Hrs (1 Hr)       
    End         : T + 6:00 Hrs (20 mins)
    Windup      : T + 8:00 Hrs

Methodology:
    No powerpoint
    At least 50% of the class should have completed the assignment


Name
Total Experience (in yrs)
Primary Skillset
Experience in Golang (if any)

Repo : https://github.com/tkmagesh/Salesforce-go-Nov-2021


Golang
    1. Why Golang?
        Portability
        Efficient memory utilization
        Concurrency
        Simplicity
        Performance
        Security
        SDK APIs

    Simplicity
        ONLY 25 keywords
        No classes (only structs)
        No inheritance (only composition)
        No Exceptions (only errors)
        No access modifiers (private, public, protected, internal)

    Concurrency
        Ability to have more than one execution path in a program
        Golang is Built for concurrency
            go, chan, select, range
        Builtin scheduler
        Goroutines are lightweight (4 KB)
        1000s of goroutines can be scheduled using 1 OS thread

    strongly typed
    compiled to machine code
    Performance is comparable to 'C' language
    Garbage collector builtin
    No need for any runtime (like JVM / CLR etc)
    Support for pointers (pointer arithmetic is not supported)
    Everything is 'value' by default (pointers are used for references)





Paradox of Choice
    By Barry Schwartz



To run the program
	go run hello-world.go

To create a build
    go build hello-world.go


Data Types in Go
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real float32, imaginary float32)
    complex128 (real float64, imaginary float64)

    byte (alias for uint8)
    rune (alias for int32) (represents an unicode code point)


Assignment : 1
Calculator Console
Display the below menu again and again until the user chooses 'exit'
1. Add
2. Subtract
3. Multiply
4. Divide
5. Exit

if user choice = 1 to 4, accept two numbers from the user, perform the respective operation and print the result and display the menu again
if user choice = 5, exit the program
if user choice < 1 or > 5, display an error message and display the menu again

Functions
    variadic functions
    anonymous functions
    higher order functions
        functions can be assigned to variables
        functions can be passed as arguments to other functions
        functions can be returned by other functions

Assignment - 2
    Refactor the assingment-1 solution into functions

Collection Types
    array
        a fixed size collection of values of the same type

    slice
        a dynamic sized collection of values of the same type
        wrapper for an array

    map
        a typed collection of key-value pairs
    

Modularity
    modules
    packages

GOPATH
    bin
    pkg
    src
        github.com
            tkmagesh
                app-1
                    pkg-1
                        file.go
                    pkg-2
                        import "github.com/tkmagesh/app-1/pkg-1"
                        file.go
                    main.go
                app-2
                    main.go

go.mod
    target go runtime version
    list of dependencies

To create a mod file
    go mod init <app_name>

To install a module
    go get <module_path>

To sync the module dependencies
    go mod tidy

To localize the dependencies
    go mod vendor